{"version":3,"sources":["component/card/Cards.module.css","component/card/Cards.jsx","api/index.js","component/countryPicer/CountryPicer.jsx","component/charts/Charts.jsx","covid.png","App.js","index.js","App.module.css","component/charts/Charts.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","test","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchDailyData","a","axios","get","catch","error","response","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchData","country","changeableUrl","fetchCountries","countries","name","CountryPicker","handleCoutryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","Chart","setDailyData","errorStatment","undefined","status","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","borderWidth","App","state","fetchedData","setState","this","image","src","alt","cards","CountryPicer","Charts","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fee6ade.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2pDZ-\",\"infected\":\"Cards_infected__1iGfl\",\"recovered\":\"Cards_recovered__1wHp9\",\"deaths\":\"Cards_deaths__3wC5C\",\"card\":\"Cards_card__3Qwq-\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'; //2\r\n\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return \"Loading...\";\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n\r\n            <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.test, styles.infected)}>\r\n            <CardContent>\r\n             {/* <Grid item component={Card}>  */}\r\n                 <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                 {/* <Typography variant=\"h5\">{confirmed.value}</Typography> */}\r\n                 <Typography variant=\"h5\">\r\n                     <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                 </Typography>\r\n                 {/* <Typography color=\"textSecondary\">REAL DATE</Typography> */}\r\n                 <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                 <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                </CardContent> \r\n             </Grid>\r\n             <Grid item component={Card} xs={12} md={3} className={cx(styles.test, styles.recovered)}>\r\n                <CardContent>\r\n             {/* <Grid item component={Card}>  */}\r\n                 <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                 {/* <Typography variant=\"h5\">{confirmed.value}</Typography> */}\r\n                 <Typography variant=\"h5\">\r\n                     <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                 </Typography>\r\n                 {/* <Typography color=\"textSecondary\">REAL DATE</Typography> */}\r\n                 <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                 <Typography variant=\"body2\">Number of recovered cases of COVID-19</Typography>\r\n                </CardContent> \r\n             </Grid>        \r\n                  <Grid item component={Card} xs={12} md={3} className={cx(styles.test, styles.deaths)}>\r\n                <CardContent>\r\n             {/* <Grid item component={Card}>  */}\r\n                 <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                 {/* <Typography variant=\"h5\">{confirmed.value}</Typography> */}\r\n                 <Typography variant=\"h5\">\r\n                     <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\r\n                 </Typography>\r\n                 {/* <Typography color=\"textSecondary\">REAL DATE</Typography> */}\r\n                 <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                 <Typography variant=\"body2\">Number of deaths cases of COVID-19</Typography>\r\n                </CardContent> \r\n             </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n\r\n        const {data} = await axios.get(`${url}/daily`).catch(function (error) {\r\n    if (error.response) {\r\n        throw(error)\r\n    }\r\n  });;\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        //console.log(modifiedData.map((daily) => (daily.confirmed)))\r\n        return modifiedData;\r\n        \r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        //console.log(modifiedData.map((daily) => (daily.confirmed)))\r\n        return error;\r\n    }\r\n\r\n}\r\n\r\nexport const fetchData = async (country) => {\r\n    try {\r\n        let changeableUrl = url;\r\n        if (country)\r\n        {\r\n            changeableUrl = `${url}/countries/${country}`;\r\n        }\r\n\r\n\r\n        const {data} = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n        return modifiedData;\r\n        \r\n\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n      const  {data: {countries}} = await axios.get(`${url}/countries`);\r\n      return countries.map((country) => (country.name));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker = ({handleCoutryChange}) => {\r\n    const [ fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () => {\r\n          setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n\r\n    return(\r\n        <FormControl>\r\n            <NativeSelect defaultValue='' onChange= {(e)=> handleCoutryChange(e.target.value)}>\r\n               <option value=\"\">Global</option>\r\n              {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { fetchDailyData } from '../../api';\r\nimport styles from './Charts.module.css';\r\n\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst Chart = ({ data, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            // const dailyData = await fetchDailyData(); //2\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    let errorStatment = dailyData.response === undefined ? \"Loading chart\" :\r\n        \"Sorry, can't get data for the chart because has error at the database of API covid (status of the response: \" + dailyData.response.status + \").\"\r\n    //console.log(dailyData.length==undefined);\r\n    const lineChart = (\r\n\r\n\r\n\r\n        dailyData.length !== undefined && dailyData.length ? (\r\n            <Line data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }]\r\n            }} />) : errorStatment\r\n\r\n    );\r\n    const barChart = (\r\n\r\n        dailyData.length !== undefined && dailyData.length ? (\r\n            <Bar data={{\r\n                labels: ['Recovered', 'Confirmed', 'Deaths'],\r\n                datasets: [\r\n                    {\r\n                        label: '# of Votes',\r\n                        data: [data.recovered.value, data.confirmed.value, data.deaths.value],\r\n                        backgroundColor: [\r\n                            'rgba(0, 255, 0, 0.5);',\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(0, 255, 0, 0.5);',\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        borderWidth: 1,\r\n                    },\r\n                ],\r\n            }} />) : errorStatment\r\n\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country.length ? barChart : lineChart}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","export default __webpack_public_path__ + \"static/media/covid.94f9c98b.png\";","\r\nimport React from 'react';\r\n//import ReactDom from 'react-dom';\r\nimport Cards from \"./component/card/Cards.jsx\";\r\nimport CountryPicer from \"./component/countryPicer/CountryPicer.jsx\"\r\nimport Charts from \"./component/charts/Charts.jsx\"\r\nimport image from \"./covid.png\"\r\nimport styles from './App.module.css';\r\n\r\nimport { fetchData } from './api';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = { data: {}, country: ''}\r\n    async componentDidMount() {\r\n\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData })\r\n        console.log(this.state.data);\r\n    }\r\n\r\n    handleCoutryChange = async (country) =>{\r\n        console.log(country);\r\n        const fetchedData = await fetchData(country)\r\n        this.setState({data: fetchedData, country: country})\r\n        \r\n    }\r\n\r\n    render() {\r\n        const {data, country} = this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={image} alt='require function fllails' />\r\n                <Cards className={styles.cards} data={data} />\r\n                <CountryPicer handleCoutryChange={this.handleCoutryChange} />\r\n                <Charts data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App  from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2LWJH\",\"image\":\"App_image__2CbC3\",\"cards\":\"App_cards__2DdpQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1l5Nx\"};"],"sourceRoot":""}